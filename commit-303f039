commit 303f0396426a2cc017d9f725f617ba681b60bec8
Author: raveit <chat-to-me@raveit.de>
Date:   Wed Dec 5 23:21:51 2012 +0100

    Show much more detail in the color picker UI and allow the user to choose a RGB colorspace

diff --git a/data/mcm-picker.ui b/data/mcm-picker.ui
index 89897a3..5ca441a 100644
--- a/data/mcm-picker.ui
+++ b/data/mcm-picker.ui
@@ -232,6 +232,49 @@
                         <property name="position">3</property>
                       </packing>
                     </child>
+                    <child>
+                      <object class="GtkHBox" id="hbox_error">
+                        <property name="visible">True</property>
+                        <property name="spacing">12</property>
+                        <child>
+                          <object class="GtkHBox" id="hbox_error_align">
+                            <property name="visible">True</property>
+                            <child>
+                              <object class="GtkLabel" id="label_error_title">
+                                <property name="visible">True</property>
+                                <property name="label" translatable="yes" comments="This shows the error in the conversion to RGB.">Error:</property>
+                              </object>
+                              <packing>
+                                <property name="expand">False</property>
+                                <property name="fill">False</property>
+                                <property name="position">0</property>
+                              </packing>
+                            </child>
+                          </object>
+                          <packing>
+                            <property name="expand">False</property>
+                            <property name="fill">False</property>
+                            <property name="position">0</property>
+                          </packing>
+                        </child>
+                        <child>
+                          <object class="GtkLabel" id="label_error">
+                            <property name="visible">True</property>
+                            <property name="selectable">True</property>
+                          </object>
+                          <packing>
+                            <property name="expand">False</property>
+                            <property name="fill">False</property>
+                            <property name="position">1</property>
+                          </packing>
+                        </child>
+                      </object>
+                      <packing>
+                        <property name="expand">False</property>
+                        <property name="fill">False</property>
+                        <property name="position">4</property>
+                      </packing>
+                    </child>
                   </object>
                 </child>
                 <child type="label">
@@ -303,10 +346,11 @@
   </object>
   <object class="GtkSizeGroup" id="sizegroup_titles">
     <widgets>
-      <widget name="hbox_rgb_align"/>
-       <widget name="hbox_colorspace_align"/>
        <widget name="hbox_xyz_align"/>
        <widget name="hbox_lab_align"/>
+      <widget name="hbox_colorspace_align"/>
+      <widget name="hbox_rgb_align"/>
+      <widget name="hbox_error_align"/>
     </widgets>
   </object>
 </interface>
diff --git a/po/POTFILES.in b/po/POTFILES.in
index 80efe83..a5c57f2 100644
--- a/po/POTFILES.in
+++ b/po/POTFILES.in
@@ -14,6 +14,7 @@ src/mcm-colorimeter.c
 src/mcm-device-xrandr.c
 src/mcm-dump-edid.c
 src/mcm-dump-profile.c
+src/mcm-enum.c
 src/mcm-fix-profile.c
 src/mcm-import.c
 src/mcm-inspect.c
diff --git a/src/Makefile.am b/src/Makefile.am
index 23349ef..a9f871b 100644
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -18,6 +18,7 @@ INCLUDES =						\
 	$(GUDEV_CFLAGS)					\
 	-DBINDIR=\"$(bindir)\"				\
 	-DSBINDIR=\"$(sbindir)\"			\
+	-DDATADIR=\"$(datadir)\"			\
 	-DSYSCONFDIR=\""$(sysconfdir)"\"		\
 	-DVERSION="\"$(VERSION)\""			\
 	-DLOCALEDIR=\""$(localedir)"\"			\
diff --git a/src/mcm-picker.c b/src/mcm-picker.c
index 08af08c..8085ad0 100644
--- a/src/mcm-picker.c
+++ b/src/mcm-picker.c
@@ -33,8 +33,9 @@
 
 #include "egg-debug.h"
 
-#include "mcm-colorimeter.h"
 #include "mcm-calibrate-argyll.h"
+#include "mcm-colorimeter.h"
+#include "mcm-profile-store.h"
 #include "mcm-utils.h"
 #include "mcm-xyz.h"
 
@@ -42,6 +43,15 @@ static GtkBuilder *builder = NULL;
 static GtkWidget *info_bar_hardware = NULL;
 static GtkWidget *info_bar_hardware_label = NULL;
 static McmCalibrate *calibrate = NULL;
+static McmProfileStore *profile_store = NULL;
+static const gchar *profile_filename = NULL;
+static gboolean done_measure = FALSE;
+
+enum {
+	MCM_PREFS_COMBO_COLUMN_TEXT,
+	MCM_PREFS_COMBO_COLUMN_PROFILE,
+	MCM_PREFS_COMBO_COLUMN_LAST
+};
 
 /**
  * mcm_picker_set_pixbuf_color:
@@ -80,6 +90,10 @@ mcm_picker_measure_cb (GtkWidget *widget, gpointer data)
 	gboolean ret;
 	GError *error = NULL;
 
+	/* reset the image */
+	widget = GTK_WIDGET (gtk_builder_get_object (builder, "image_preview"));
+	gtk_image_set_from_file (GTK_IMAGE (widget), DATADIR "/icons/hicolor/64x64/apps/mate-color-manager.png");
+
 	/* get value */
 	window = GTK_WINDOW (gtk_builder_get_object (builder, "dialog_picker"));
 	ret = mcm_calibrate_spotread (calibrate, window, &error);
@@ -89,30 +103,30 @@ mcm_picker_measure_cb (GtkWidget *widget, gpointer data)
 	}
 }
 
-#define TYPE_XYZ_DBL2 (COLORSPACE_SH(PT_XYZ)|CHANNELS_SH(3)|BYTES_SH(sizeof(gdouble)))
-
 /**
- * gpk_update_viewer_notify_network_state_cb:
+ * mcm_picker_refresh_results:
  **/
 static void
-mcm_picker_xyz_notify_cb (McmCalibrate *calibrate_, GParamSpec *pspec, gpointer user_data)
+mcm_picker_refresh_results (void)
 {
 	McmXyz *xyz = NULL;
 	GtkImage *image;
 	GtkLabel *label;
 	GdkPixbuf *pixbuf = NULL;
-	GtkWidget *widget;
 	gdouble color_xyz[3];
 	guint8 color_rgb[3];
 	gdouble color_lab[3];
+	gdouble color_error[3];
 	gchar *text_xyz = NULL;
 	gchar *text_lab = NULL;
 	gchar *text_rgb = NULL;
+	gchar *text_error = NULL;
 	cmsHPROFILE profile_xyz;
 	cmsHPROFILE profile_rgb;
 	cmsHPROFILE profile_lab;
 	cmsHTRANSFORM transform_rgb;
 	cmsHTRANSFORM transform_lab;
+	cmsHTRANSFORM transform_error;
 
 	/* get new value */
 	g_object_get (calibrate, "xyz", &xyz, NULL);
@@ -135,19 +149,22 @@ mcm_picker_xyz_notify_cb (McmCalibrate *calibrate_, GParamSpec *pspec, gpointer
 
 	/* get profiles */
 	profile_xyz = cmsCreateXYZProfile ();
-	profile_rgb = cmsCreate_sRGBProfile ();
+	profile_rgb = cmsOpenProfileFromFile (profile_filename, "r");
 	profile_lab = cmsCreateLabProfile (cmsD50_xyY ());
 
-	/* create transform_rgb */
-	transform_rgb = cmsCreateTransform (profile_xyz, TYPE_XYZ_DBL2, profile_rgb, TYPE_RGB_8, INTENT_PERCEPTUAL, 0);
-	transform_lab = cmsCreateTransform (profile_xyz, TYPE_XYZ_DBL2, profile_lab, TYPE_Lab_DBL, INTENT_PERCEPTUAL, 0);
+	/* create transforms */
+	transform_rgb = cmsCreateTransform (profile_xyz, TYPE_XYZ_DBL, profile_rgb, TYPE_RGB_8, INTENT_PERCEPTUAL, 0);
+	transform_lab = cmsCreateTransform (profile_xyz, TYPE_XYZ_DBL, profile_lab, TYPE_Lab_DBL, INTENT_PERCEPTUAL, 0);
+	transform_error = cmsCreateTransform (profile_rgb, TYPE_RGB_8, profile_xyz, TYPE_XYZ_DBL, INTENT_PERCEPTUAL, 0);
 
 	cmsDoTransform (transform_rgb, color_xyz, color_rgb, 1);
 	cmsDoTransform (transform_lab, color_xyz, color_lab, 1);
+	cmsDoTransform (transform_error, color_rgb, color_error, 1);
 
 	/* destroy lcms state */
 	cmsDeleteTransform (transform_rgb);
 	cmsDeleteTransform (transform_lab);
+	cmsDeleteTransform (transform_error);
 	cmsCloseProfile (profile_xyz);
 	cmsCloseProfile (profile_rgb);
 	cmsCloseProfile (profile_lab);
@@ -159,7 +176,9 @@ mcm_picker_xyz_notify_cb (McmCalibrate *calibrate_, GParamSpec *pspec, gpointer
 
 	/* set LAB */
 	label = GTK_LABEL (gtk_builder_get_object (builder, "label_lab"));
-	text_lab = g_strdup_printf ("%.3f, %.3f, %.3f", color_lab[0], color_lab[1], color_lab[2]);
+	text_rgb = g_strdup_printf ("%i, %i, %i (#%02X%02X%02X)",
+				    color_rgb[0], color_rgb[1], color_rgb[2],
+				    color_rgb[0], color_rgb[1], color_rgb[2]);
 	gtk_label_set_label (label, text_lab);
 
 	/* set RGB */
@@ -168,9 +187,13 @@ mcm_picker_xyz_notify_cb (McmCalibrate *calibrate_, GParamSpec *pspec, gpointer
 	gtk_label_set_label (label, text_rgb);
 	mcm_picker_set_pixbuf_color (pixbuf, color_rgb[0], color_rgb[1], color_rgb[2]);
 
-	/* set XYZ */
-	widget = GTK_WIDGET (gtk_builder_get_object (builder, "expander_results"));
-	gtk_expander_set_expanded (GTK_EXPANDER (widget), TRUE);
+	/* set error */
+	label = GTK_LABEL (gtk_builder_get_object (builder, "label_error"));
+	text_error = g_strdup_printf ("%.1f%%, %.1f%%, %.1f%%",
+				      ABS ((color_error[0] - color_xyz[0]) / color_xyz[0] * 100),
+				      ABS ((color_error[1] - color_xyz[1]) / color_xyz[1] * 100),
+				      ABS ((color_error[2] - color_xyz[2]) / color_xyz[2] * 100));
+	gtk_label_set_label (label, text_error);
 
 	/* set image */
 	image = GTK_IMAGE (gtk_builder_get_object (builder, "image_preview"));
@@ -187,6 +210,25 @@ mcm_picker_xyz_notify_cb (McmCalibrate *calibrate_, GParamSpec *pspec, gpointer
 }
 
 /**
+ * mcm_picker_xyz_notify_cb:
+ **/
+static void
+mcm_picker_xyz_notify_cb (McmCalibrate *calibrate_, GParamSpec *pspec, gpointer user_data)
+{
+	GtkWidget *widget;
+
+	/* set expanded */
+	widget = GTK_WIDGET (gtk_builder_get_object (builder, "expander_results"));
+	gtk_expander_set_expanded (GTK_EXPANDER (widget), TRUE);
+	gtk_widget_set_sensitive (widget, TRUE);
+
+	/* we've got results so make sure it's sensitive */
+	done_measure = TRUE;
+
+	mcm_picker_refresh_results ();
+}
+
+/**
  * mcm_picker_close_cb:
  **/
 static void
@@ -300,6 +342,141 @@ mcm_picker_lcms_error_cb (gint error_code, const gchar *error_text)
 }
 
 /**
+ * mcm_prefs_space_combo_changed_cb:
+ **/
+static void
+mcm_prefs_space_combo_changed_cb (GtkWidget *widget, gpointer data)
+{
+	gboolean ret;
+	GtkTreeIter iter;
+	GtkTreeModel *model;
+	McmProfile *profile = NULL;
+
+	/* no selection */
+	ret = gtk_combo_box_get_active_iter (GTK_COMBO_BOX(widget), &iter);
+	if (!ret)
+		goto out;
+
+	/* get profile */
+	model = gtk_combo_box_get_model (GTK_COMBO_BOX(widget));
+	gtk_tree_model_get (model, &iter,
+			    MCM_PREFS_COMBO_COLUMN_PROFILE, &profile,
+			    -1);
+	if (profile == NULL)
+		goto out;
+
+	profile_filename = mcm_profile_get_filename (profile);
+	egg_debug ("changed picker space %s", profile_filename);
+	mcm_picker_refresh_results ();
+out:
+	if (profile != NULL)
+		g_object_unref (profile);
+}
+
+/**
+ * mcm_prefs_set_combo_simple_text:
+ **/
+static void
+mcm_prefs_set_combo_simple_text (GtkWidget *combo_box)
+{
+	GtkCellRenderer *renderer;
+	GtkListStore *store;
+
+	store = gtk_list_store_new (2, G_TYPE_STRING, MCM_TYPE_PROFILE);
+	gtk_tree_sortable_set_sort_column_id (GTK_TREE_SORTABLE (store), MCM_PREFS_COMBO_COLUMN_TEXT, GTK_SORT_ASCENDING);
+	gtk_combo_box_set_model (GTK_COMBO_BOX (combo_box), GTK_TREE_MODEL (store));
+	g_object_unref (store);
+
+	renderer = gtk_cell_renderer_text_new ();
+	g_object_set (renderer,
+		      "ellipsize", PANGO_ELLIPSIZE_END,
+		      "wrap-mode", PANGO_WRAP_WORD_CHAR,
+		      "width-chars", 60,
+		      NULL);
+	gtk_cell_layout_pack_start (GTK_CELL_LAYOUT (combo_box), renderer, TRUE);
+	gtk_cell_layout_set_attributes (GTK_CELL_LAYOUT (combo_box), renderer,
+					"text", MCM_PREFS_COMBO_COLUMN_TEXT,
+					NULL);
+}
+
+/**
+ * mcm_prefs_combobox_add_profile:
+ **/
+static void
+mcm_prefs_combobox_add_profile (GtkWidget *widget, McmProfile *profile, GtkTreeIter *iter)
+{
+	GtkTreeModel *model;
+	GtkTreeIter iter_tmp;
+	const gchar *description;
+
+	/* iter is optional */
+	if (iter == NULL)
+		iter = &iter_tmp;
+
+
+	/* also add profile */
+	model = gtk_combo_box_get_model (GTK_COMBO_BOX(widget));
+	description = mcm_profile_get_description (profile);
+	gtk_list_store_append (GTK_LIST_STORE(model), iter);
+	gtk_list_store_set (GTK_LIST_STORE(model), iter,
+			    MCM_PREFS_COMBO_COLUMN_TEXT, description,
+			    MCM_PREFS_COMBO_COLUMN_PROFILE, profile,
+			    -1);
+}
+
+/**
+ * mcm_prefs_setup_space_combobox:
+ **/
+static void
+mcm_prefs_setup_space_combobox (GtkWidget *widget)
+{
+	McmProfile *profile;
+	guint i;
+	const gchar *filename;
+	McmColorspace colorspace;
+	gboolean has_profile = FALSE;
+	gboolean has_vcgt;
+	gboolean has_colorspace_description;
+	gchar *text = NULL;
+	GPtrArray *profile_array = NULL;
+	GtkTreeIter iter;
+
+	/* get new list */
+	profile_array = mcm_profile_store_get_array (profile_store);
+
+	/* update each list */
+	for (i=0; i<profile_array->len; i) {
+		profile = g_ptr_array_index (profile_array, i);
+
+		/* only for correct kind */
+		has_vcgt = mcm_profile_get_has_vcgt (profile);
+		has_colorspace_description = mcm_profile_has_colorspace_description (profile);
+		colorspace = mcm_profile_get_colorspace (profile);
+		if (!has_vcgt && has_colorspace_description &&
+		    colorspace == MCM_COLORSPACE_RGB) {
+			mcm_prefs_combobox_add_profile (widget, profile, &iter);
+
+			/* set active option */
+			filename = mcm_profile_get_filename (profile);
+			if (g_strcmp0 (filename, profile_filename) == 0)
+				gtk_combo_box_set_active_iter (GTK_COMBO_BOX (widget), &iter);
+			has_profile = TRUE;
+		}
+	}
+	if (!has_profile) {
+		/* TRANSLATORS: this is when there are no profiles that can be used; the search term is either "RGB" or "CMYK" */
+		text = g_strdup_printf (_("No %s color spaces available"),
+					mcm_colorspace_to_localised_string (colorspace));
+		gtk_combo_box_append_text (GTK_COMBO_BOX(widget), text);
+		gtk_combo_box_set_active (GTK_COMBO_BOX (widget), 0);
+		gtk_widget_set_sensitive (widget, FALSE);
+	}
+	if (profile_array != NULL)
+		g_ptr_array_unref (profile_array);
+	g_free (text);
+}
+
+/**
  * main:
  **/
 int
@@ -423,12 +600,35 @@ main (int argc, char *argv[])
 	/* disable some ui if no hardware */
 	mcm_picker_colorimeter_setup_ui (colorimeter);
 
+	/* maintain a list of profiles */
+	profile_store = mcm_profile_store_new ();
+
+	/* default to AdobeRGB */
+	profile_filename = "/usr/share/color/icc/Argyll/ClayRGB1998.icm";
+
+	/* setup RGB combobox */
+	widget = GTK_WIDGET (gtk_builder_get_object (builder, "combobox_colorspace"));
+	mcm_prefs_set_combo_simple_text (widget);
+	mcm_prefs_setup_space_combobox (widget);
+	g_signal_connect (G_OBJECT (widget), "changed",
+			  G_CALLBACK (mcm_prefs_space_combo_changed_cb), NULL);
+
+	/* setup results expander */
+	mcm_picker_refresh_results ();
+
+	/* setup initial preview window */
+	widget = GTK_WIDGET (gtk_builder_get_object (builder, "image_preview"));
+	gtk_image_set_from_file (GTK_IMAGE (widget), DATADIR "/icons/hicolor/64x64/apps/mate-color-manager.png");
+
+
 	/* wait */
 	gtk_widget_show (main_window);
 	g_main_loop_run (loop);
 
 out:
 	g_object_unref (unique_app);
+	if (profile_store != NULL)
+		g_object_unref (profile_store);
 	if (colorimeter != NULL)
 		g_object_unref (colorimeter);
 	if (calibrate != NULL)
